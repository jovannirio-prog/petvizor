'use client'

import { useState } from 'react'

export default function TestRegisterFixedPage() {
  const [results, setResults] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const addResult = (message: string) => {
    setResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  const testRegisterFixed = async () => {
    if (!email || !password) {
      addResult('‚ùå –í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å')
      return
    }

    setLoading(true)
    setResults([])
    addResult('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...')
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = crypto.randomUUID()
      addResult(`üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID: ${userId}`)
      
      // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      addResult('üë§ –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const userResponse = await fetch('/api/supabase-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action: 'create_user',
          data: {
            id: userId,
            email: email
          }
        })
      })

      const userResult = await userResponse.json()
      
      if (!userResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResult.error}`)
      }

      addResult('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
      addResult(`üìä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResult.data?.[0]?.id}`)

      // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      addResult('üë§ –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...')
      const profileResponse = await fetch('/api/supabase-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action: 'create_profile',
          data: {
            id: userId, // —Ç–æ—Ç –∂–µ ID, —á—Ç–æ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            email: email,
            full_name: email.split('@')[0] // –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –∫–∞–∫ –∏–º—è
          }
        })
      })

      const profileResult = await profileResponse.json()
      
      if (!profileResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileResult.error}`)
      }

      addResult('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
      addResult(`üìä ID –ø—Ä–æ—Ñ–∏–ª—è: ${profileResult.data?.[0]?.id}`)

      // –®–∞–≥ 3: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API endpoint
      addResult('üîê –®–∞–≥ 3: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API...')
      const authResponse = await fetch('/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: email,
          password: password
        })
      })

      const authResult = await authResponse.json()
      
      if (!authResult.success) {
        addResult(`‚ö†Ô∏è Auth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${authResult.error}`)
        addResult(`üìÑ –î–µ—Ç–∞–ª–∏: ${JSON.stringify(authResult.details)}`)
        
        if (authResult.error.includes('400')) {
          addResult('üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        }
      } else {
        if (authResult.warning) {
          addResult(`‚úÖ Auth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${authResult.warning}`)
          addResult(`üìÑ –î–µ—Ç–∞–ª–∏: ${JSON.stringify(authResult.details)}`)
        } else {
          addResult('‚úÖ Auth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
          addResult(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(authResult.data)}`)
        }
      }

      addResult('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
      addResult('üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`)
    } finally {
      setLoading(false)
      addResult('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    }
  }

  const clearResults = () => {
    setResults([])
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">üß™ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
        
        <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold text-green-800 mb-4">‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!</h2>
          <div className="space-y-2 text-sm text-green-700">
            <p><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞—Ä—É—à–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è</p>
            <p><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º</p>
            <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫</p>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
          
          <div className="space-y-4 mb-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="test@example.com"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="password123"
              />
            </div>
          </div>
          
          <button
            onClick={testRegisterFixed}
            disabled={loading}
            className="w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'}
          </button>
        </div>
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm h-96 overflow-y-auto">
            {results.length === 0 ? (
              <p className="text-gray-500">–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"</p>
            ) : (
              results.map((result, index) => (
                <div key={index} className="mb-1">
                  {result}
                </div>
              ))
            )}
          </div>
          <button
            onClick={clearResults}
            className="mt-2 bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>
        
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h2 className="text-xl font-semibold text-blue-800 mb-4">üí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å</h2>
          <div className="space-y-2 text-sm text-blue-700">
            <p><strong>1.</strong> –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users</p>
            <p><strong>2.</strong> –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–µ–º –∂–µ ID</p>
            <p><strong>3.</strong> –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API endpoint</p>
            <p><strong>4.</strong> –ò–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π</p>
          </div>
        </div>
      </div>
    </div>
  )
}
