'use client'

import { useState, useEffect } from 'react'
import NavigationWrapper from '@/components/NavigationWrapper'
import { useUser } from '@/hooks/useUser'
import { useRouter } from 'next/navigation'
import { 
  User, 
  PawPrint, 
  Plus, 
  Settings, 
  Bell, 
  Calendar,
  Heart,
  Activity,
  ChevronDown,
  ChevronRight,
  Dog,
  Cat,
  MessageCircle,
  QrCode,
  FileText,
  Clock,
  ArrowLeft
} from 'lucide-react'
import Link from 'next/link'

interface Pet {
  id: string
  name: string
  species: string | null
  breed: string | null
}

interface Event {
  id: string
  pet_id: string
  event_type: string
  event_name: string
  event_description: string | null
  event_date: string
  pets?: {
    id: string
    name: string
    species: string | null
  }
}

interface FAQItem {
  id: string
  question: string
  answer: string
  icon: React.ReactNode
}

export default function DashboardPage() {
  const { user, loading } = useUser()
  const router = useRouter()
  const [pets, setPets] = useState<Pet[]>([])
  const [events, setEvents] = useState<Event[]>([])
  const [loadingPets, setLoadingPets] = useState(true)
  const [loadingEvents, setLoadingEvents] = useState(true)
  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null)

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login')
    }
  }, [user, loading, router])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user) {
      loadPets()
      loadEvents()
    }
  }, [user])

  const loadPets = async () => {
    try {
      setLoadingPets(true)
      const token = localStorage.getItem('supabase_access_token')
      if (!token) {
        return
      }

      const response = await fetch('/api/pets', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (response.ok) {
        const petsData = await response.json()
        setPets(petsData.pets || [])
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤:', error)
    } finally {
      setLoadingPets(false)
    }
  }

  const loadEvents = async () => {
    try {
      setLoadingEvents(true)
      const token = localStorage.getItem('supabase_access_token')
      if (!token) {
        return
      }

      const response = await fetch('/api/events', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (response.ok) {
        const eventsData = await response.json()
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        const futureEvents = eventsData
          .filter((event: Event) => new Date(event.event_date) > new Date())
          .sort((a: Event, b: Event) => new Date(a.event_date).getTime() - new Date(b.event_date).getTime())
          .slice(0, 3) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö
        setEvents(futureEvents)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error)
    } finally {
      setLoadingEvents(false)
    }
  }

  const getPetIcon = (species: string | null) => {
    if (!species) return <PawPrint className="w-5 h-5" />
    
    switch (species.toLowerCase()) {
      case '—Å–æ–±–∞–∫–∞':
      case 'dog':
        return <Dog className="w-5 h-5" />
      case '–∫–æ—à–∫–∞':
      case 'cat':
        return <Cat className="w-5 h-5" />
      default:
        return <PawPrint className="w-5 h-5" />
    }
  }

  const getEventTypeIcon = (eventType: string) => {
    switch (eventType) {
      case '–≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è':
        return 'üíâ'
      case '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':
        return 'üéÇ'
      case '–≤–∏–∑–∏—Ç –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É':
        return 'üè•'
      case '—Å—Ç—Ä–∏–∂–∫–∞':
        return '‚úÇÔ∏è'
      case '–∫—É–ø–∞–Ω–∏–µ':
        return 'üõÅ'
      default:
        return 'üìÖ'
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU')
  }

  const getDaysUntilEvent = (dateString: string) => {
    const eventDate = new Date(dateString)
    const today = new Date()
    const diffTime = eventDate.getTime() - today.getTime()
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    
    if (diffDays < 0) return '–ü—Ä–æ—à–ª–æ'
    if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è'
    if (diffDays === 1) return '–ó–∞–≤—Ç—Ä–∞'
    if (diffDays < 7) return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω—è`
    return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω–µ–π`
  }

  const faqItems: FAQItem[] = [
    {
      id: 'pets',
      question: '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?',
      answer: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞" –≤ –±–ª–æ–∫–µ "–ü–∏—Ç–æ–º—Ü—ã" –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã". –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ç–æ–º—Ü–µ: –∏–º—è, –≤–∏–¥, –ø–æ—Ä–æ–¥–∞, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–µ—Å. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.',
      icon: <PawPrint className="w-5 h-5" />
    },
    {
      id: 'qr',
      question: '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã?',
      answer: '–ö–∞–∂–¥–æ–º—É –ø–∏—Ç–æ–º—Ü—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR-–∫–æ–¥. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –µ–≥–æ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –æ—à–µ–π–Ω–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞. –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è, –Ω–∞—à–µ–¥—à–∏–π —Å–º–æ–∂–µ—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.',
      icon: <QrCode className="w-5 h-5" />
    },
    {
      id: 'ai',
      question: '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?',
      answer: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏" –∏ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ, –ø–∏—Ç–∞–Ω–∏–∏, —É—Ö–æ–¥–µ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º. AI –¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ.',
      icon: <MessageCircle className="w-5 h-5" />
    },
    {
      id: 'events',
      question: '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?',
      answer: '–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞–π–¥–∏—Ç–µ –±–ª–æ–∫ "–°–æ–±—ã—Ç–∏—è" –∏ –Ω–∞–∂–º–∏—Ç–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏". –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è: –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–∏–∑–∏—Ç –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å.',
      icon: <Calendar className="w-5 h-5" />
    },
    {
      id: 'scan',
      question: '–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ—Ä—è–≤—à–µ–≥–æ—Å—è –ø–∏—Ç–æ–º—Ü–∞?',
      answer: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–∫–∞–Ω–µ—Ä QR". –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞—à–µ–ª –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª QR-–∫–æ–¥, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∏—Ç–æ–º—Ü–∞ –ø–æ QR-–∫–æ–¥—É.',
      icon: <FileText className="w-5 h-5" />
    }
  ]

  const toggleFAQ = (id: string) => {
    setExpandedFAQ(expandedFAQ === id ? null : id)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <NavigationWrapper />
        <div className="max-w-7xl mx-auto p-4 pt-8">
          <div className="bg-white rounded-lg shadow-lg p-8 text-center">
            <PawPrint className="h-16 w-16 text-gray-300 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
            <p className="text-gray-600 mb-6">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
            <Link
              href="/login"
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors inline-flex items-center"
            >
              <ArrowLeft className="h-5 w-5 mr-2" />
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <NavigationWrapper>
      <div className="max-w-7xl mx-auto p-4 pt-24">
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
              </h1>
              <p className="text-gray-600">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø–∏—Ç–æ–º—Ü–∞–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </p>
            </div>
            <Link
              href="/profile"
              className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full hover:bg-blue-200 transition-colors"
              title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
            >
              <Settings className="w-6 h-6 text-blue-600" />
            </Link>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          {/* –ë–ª–æ–∫ –ü–∏—Ç–æ–º—Ü—ã */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-gray-900">–ü–∏—Ç–æ–º—Ü—ã</h2>
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <PawPrint className="w-5 h-5 text-blue-600" />
              </div>
            </div>
            
            {loadingPets ? (
              <div className="flex items-center justify-center py-4">
                <div className="w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
              </div>
            ) : !Array.isArray(pets) || pets.length === 0 ? (
              <div className="text-center py-4">
                <p className="text-gray-500 text-sm mb-4">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤</p>
              </div>
            ) : (
              <div className="space-y-2 mb-4">
                {(Array.isArray(pets) ? pets : []).slice(0, 3).map((pet) => (
                  <Link
                    key={pet.id}
                    href={`/pet/${pet.id}`}
                    className="flex items-center space-x-3 p-2 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                  >
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      {getPetIcon(pet.species)}
                    </div>
                    <span className="text-sm font-medium text-gray-900">{pet.name}</span>
                  </Link>
                ))}
                {Array.isArray(pets) && pets.length > 3 && (
                  <p className="text-xs text-gray-500 text-center">
                    –ò –µ—â–µ {pets.length - 3} –ø–∏—Ç–æ–º—Ü–µ–≤
                  </p>
                )}
              </div>
            )}
            
            <div className="space-y-2">
              <Link
                href="/pets"
                className="w-full flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm font-medium"
              >
                –í—Å–µ –ø–∏—Ç–æ–º—Ü—ã
              </Link>
              <Link
                href="/pet/new"
                className="w-full flex items-center justify-center px-4 py-2 border border-blue-600 text-blue-600 rounded-md hover:bg-blue-50 transition-colors text-sm font-medium"
              >
                <Plus className="w-4 h-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
              </Link>
            </div>
          </div>

          {/* –ë–ª–æ–∫ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ */}
          <Link 
            href="/ai-consultation"
            className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow cursor-pointer group"
          >
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-gray-900">AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</h2>
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center group-hover:bg-green-200 transition-colors">
                <MessageCircle className="w-5 h-5 text-green-600" />
              </div>
            </div>
            <p className="text-gray-600 text-sm mb-4">
              –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º –æ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
            </p>
            <div className="flex items-center text-green-600 text-sm font-medium">
              –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
              <ChevronRight className="w-4 h-4 ml-1" />
            </div>
          </Link>

          {/* –ë–ª–æ–∫ –°–æ–±—ã—Ç–∏—è */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-gray-900">–°–æ–±—ã—Ç–∏—è</h2>
              <div className="relative">
                <div className="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <Bell className="w-5 h-5 text-yellow-600" />
                </div>
                {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
                  <span className="text-xs text-white font-bold">0</span>
                </div>
              </div>
            </div>
            
            {loadingEvents ? (
              <div className="flex items-center justify-center py-4">
                <div className="w-5 h-5 border-2 border-yellow-500 border-t-transparent rounded-full animate-spin"></div>
              </div>
            ) : events.length === 0 ? (
              <div className="text-center py-4">
                <p className="text-gray-500 text-sm mb-4">–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π</p>
              </div>
            ) : (
              <div className="space-y-3 mb-4">
                <h3 className="text-sm font-medium text-gray-700">–ë—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:</h3>
                {events.map((event) => (
                  <Link
                    key={event.id}
                    href={`/pet/${event.pet_id}/events`}
                    className="block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                  >
                    <div className="flex items-start space-x-3">
                      <span className="text-lg">{getEventTypeIcon(event.event_type)}</span>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between mb-1">
                          <p className="text-sm font-medium text-gray-900 truncate">{event.event_name}</p>
                          <div className="flex items-center text-xs text-gray-500">
                            <Clock className="w-3 h-3 mr-1" />
                            {getDaysUntilEvent(event.event_date)}
                          </div>
                        </div>
                                                 <p className="text-xs text-gray-600 mb-1">
                           {event.pets?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚Ä¢ {event.event_type}
                         </p>
                        {event.event_description && (
                          <p className="text-xs text-gray-500 truncate">{event.event_description}</p>
                        )}
                        <p className="text-xs text-gray-400 mt-1">{formatDate(event.event_date)}</p>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            )}
            
                         <div className="space-y-2">
               <Link
                 href="/events"
                 className="w-full flex items-center justify-center px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors text-sm font-medium"
               >
                 –í—Å–µ —Å–æ–±—ã—Ç–∏—è
               </Link>
               <Link
                 href="/events"
                 className="w-full flex items-center justify-center px-4 py-2 border border-yellow-600 text-yellow-600 rounded-md hover:bg-yellow-50 transition-colors text-sm font-medium"
               >
                 <Plus className="w-4 h-4 mr-2" />
                 –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
               </Link>
             </div>
          </div>
        </div>

        {/* –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-bold text-gray-900 mb-6">–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PetVizor</h2>
          <div className="space-y-4">
            {faqItems.map((item) => (
              <div key={item.id} className="border border-gray-200 rounded-lg">
                <button
                  onClick={() => toggleFAQ(item.id)}
                  className="w-full flex items-center justify-between p-4 text-left hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      {item.icon}
                    </div>
                    <span className="font-medium text-gray-900">{item.question}</span>
                  </div>
                  {expandedFAQ === item.id ? (
                    <ChevronDown className="w-5 h-5 text-gray-500" />
                  ) : (
                    <ChevronRight className="w-5 h-5 text-gray-500" />
                  )}
                </button>
                {expandedFAQ === item.id && (
                  <div className="px-4 pb-4">
                    <p className="text-gray-600 text-sm leading-relaxed">{item.answer}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </NavigationWrapper>
  )
}
