'use client'

import { useState } from 'react'
import { supabase } from '@/lib/supabase'
import { LogIn, Mail, Lock, Eye, EyeOff, ArrowLeft } from 'lucide-react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import Navigation from '@/components/Navigation'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    console.log('üîê Login: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞')
    setLoading(true)
    setError(null)

    try {
      console.log('üìß Login: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/login')
      console.log('üåê Login: –¢–µ–∫—É—â–∏–π URL:', window.location.origin)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API endpoint –¥–ª—è –≤—Ö–æ–¥–∞
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email,
          password
        })
      }).catch((fetchError) => {
        console.error('‚ùå Login: –û—à–∏–±–∫–∞ fetch:', fetchError)
        console.error('‚ùå Login: –¢–∏–ø –æ—à–∏–±–∫–∏:', fetchError.name)
        console.error('‚ùå Login: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', fetchError.message)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if (fetchError.name === 'TypeError' && fetchError.message.includes('fetch')) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase.')
        } else if (fetchError.name === 'AbortError') {
          throw new Error('–ó–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${fetchError.message}`)
        }
      })

      console.log('üì° Login: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å:', response.status)
      console.log('üì° Login: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()))
      
      if (!response.ok) {
        console.error('‚ùå Login: HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText)
        const errorText = await response.text()
        console.error('‚ùå Login: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText)
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`)
      }
      
      const result = await response.json()
      console.log('üìÑ Login: –†–µ–∑—É–ª—å—Ç–∞—Ç:', result)
      console.log('üìÑ Login: result.data:', result.data)
      console.log('üìÑ Login: result.data.session:', result.data?.session)
      console.log('üìÑ Login: result.data.session.access_token:', result.data?.session?.access_token)

      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É')
      }

      console.log('‚úÖ Login: –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã')
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      let tokensSaved = false
      
      if (result.data?.session?.access_token) {
        localStorage.setItem('supabase_access_token', result.data.session.access_token)
        console.log('üíæ Login: Access token —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–ª–∏–Ω–∞:', result.data.session.access_token.length)
        tokensSaved = true
      } else {
        console.log('‚ùå Login: Access token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ')
      }
      
      if (result.data?.session?.refresh_token) {
        localStorage.setItem('supabase_refresh_token', result.data.session.refresh_token)
        console.log('üíæ Login: Refresh token —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–ª–∏–Ω–∞:', result.data.session.refresh_token.length)
        tokensSaved = true
      } else {
        console.log('‚ùå Login: Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const savedAccessToken = localStorage.getItem('supabase_access_token')
      const savedRefreshToken = localStorage.getItem('supabase_refresh_token')
      console.log('üîç Login: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - Access token:', !!savedAccessToken, 'Refresh token:', !!savedRefreshToken)

      if (tokensSaved) {
        console.log('üîÑ Login: –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        window.location.href = '/dashboard'
      } else {
        console.log('‚ùå Login: –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ')
        setError('–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      }
      
    } catch (error: any) {
      console.error('‚ùå Login: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
      console.error('‚ùå Login: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack)
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.message.includes('fetch')) {
        setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase.')
      } else if (error.message.includes('CORS')) {
        setError('–û—à–∏–±–∫–∞ CORS. –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞.')
      } else if (error.message.includes('timeout')) {
        setError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.')
      } else {
        setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <Navigation />
      
      <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <Link 
              href="/" 
              className="inline-flex items-center text-sm text-gray-600 hover:text-gray-900 mb-6"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </Link>
            <h2 className="text-3xl font-bold text-gray-900">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
            <p className="mt-2 text-gray-600">
              –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç PetVizor
            </p>
          </div>

          <form onSubmit={handleLogin} className="mt-8 space-y-6">
            <div className="space-y-4">
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder="your@email.com"
                    required
                  />
                </div>
              </div>

              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                  –ü–∞—Ä–æ–ª—å
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                  </button>
                </div>
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                {error}
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-primary-500 text-white py-3 px-4 rounded-lg hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {loading ? (
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <>
                  <LogIn className="h-5 w-5" />
                  <span>–í–æ–π—Ç–∏</span>
                </>
              )}
            </button>

            <div className="text-center">
              <p className="text-sm text-gray-600">
                –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
                <Link href="/register" className="text-primary-600 hover:text-primary-700 font-medium">
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Link>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}
