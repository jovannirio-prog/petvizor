import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import QRCode from 'qrcode'

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîß API QR Code: –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', params.id)
    
    const supabase = createClient()
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
    const { data: pet, error: petError } = await supabase
      .from('pets')
      .select('*')
      .eq('id', params.id)
      .single()

    if (petError || !pet) {
      console.error('‚ùå API QR Code: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω:', petError)
      return NextResponse.json({ error: '–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞
    const baseUrl = process.env.NEXT_PUBLIC_VERCEL_URL 
      ? `https://${process.env.NEXT_PUBLIC_VERCEL_URL}` 
      : 'http://localhost:3000'
    const publicUrl = `${baseUrl}/pet/${pet.id}`
    
    console.log('üîß API QR Code: –ü—É–±–ª–∏—á–Ω—ã–π URL:', publicUrl)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∫–∞–∫ base64
    const qrCodeDataUrl = await QRCode.toDataURL(publicUrl, {
      width: 300,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      },
      errorCorrectionLevel: 'M'
    })

    console.log('üîß API QR Code: QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ Supabase Storage
    const fileName = `qr-codes/${pet.id}.png`
    const qrCodeBuffer = Buffer.from(qrCodeDataUrl.split(',')[1], 'base64')
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('pet-photos')
      .upload(fileName, qrCodeBuffer, {
        contentType: 'image/png',
        upsert: true
      })

    if (uploadError) {
      console.error('‚ùå API QR Code: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞:', uploadError)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR-–∫–æ–¥–∞' }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL QR-–∫–æ–¥–∞
    const { data: { publicUrl: qrCodeUrl } } = supabase.storage
      .from('pet-photos')
      .getPublicUrl(fileName)

    console.log('üîß API QR Code: QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', qrCodeUrl)

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–∏—Ç–æ–º—Ü–∞ —Å URL QR-–∫–æ–¥–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    console.log('üîß API QR Code: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    console.log('üîß API QR Code: qr_code_url:', qrCodeUrl)
    console.log('üîß API QR Code: qr_code_image length:', qrCodeDataUrl.length)
    
    const { error: updateError } = await supabase
      .from('pets')
      .update({
        qr_code_url: qrCodeUrl,
        qr_code_image: qrCodeDataUrl, // –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        qr_code_updated_at: new Date().toISOString()
      })
      .eq('id', pet.id)

    if (updateError) {
      console.error('‚ùå API QR Code: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', updateError)
      console.error('‚ùå API QR Code: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', updateError.details)
      console.error('‚ùå API QR Code: –ö–æ–¥ –æ—à–∏–±–∫–∏:', updateError.code)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞' }, { status: 500 })
    }

    console.log('‚úÖ API QR Code: –ó–∞–ø–∏—Å—å –ø–∏—Ç–æ–º—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    console.log('‚úÖ API QR Code: QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

    return NextResponse.json({
      success: true,
      qr_code_url: qrCodeUrl,
      qr_code_image: qrCodeDataUrl, // –î–æ–±–∞–≤–ª—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      public_url: publicUrl,
      message: 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'
    })

  } catch (error: any) {
    console.error('‚ùå API QR Code: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    }, { status: 500 })
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîß API QR Code: –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', params.id)
    
    const supabase = createClient()
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ —Å QR-–∫–æ–¥–æ–º
    const { data: pet, error: petError } = await supabase
      .from('pets')
      .select('*')
      .eq('id', params.id)
      .single()

    if (petError || !pet) {
      console.error('‚ùå API QR Code: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω:', petError)
      return NextResponse.json({ error: '–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    console.log('üîß API QR Code: –ü–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω:', pet.name)
    console.log('üîß API QR Code: qr_code_url –≤ –±–∞–∑–µ:', pet.qr_code_url ? 'exists' : 'null')
    console.log('üîß API QR Code: qr_code_image –≤ –±–∞–∑–µ:', pet.qr_code_image ? 'exists' : 'null')
    console.log('üîß API QR Code: qr_code_image length:', pet.qr_code_image?.length || 0)

    // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞
    const baseUrl = process.env.NEXT_PUBLIC_VERCEL_URL 
      ? `https://${process.env.NEXT_PUBLIC_VERCEL_URL}` 
      : 'http://localhost:3000'
    const publicUrl = `${baseUrl}/pet/${pet.id}`

    return NextResponse.json({
      success: true,
      qr_code_url: pet.qr_code_url,
      qr_code_image: pet.qr_code_image, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      public_url: publicUrl,
      qr_code_updated_at: pet.qr_code_updated_at,
      has_qr_code: !!pet.qr_code_image // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    })

  } catch (error: any) {
    console.error('‚ùå API QR Code: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    }, { status: 500 })
  }
}
