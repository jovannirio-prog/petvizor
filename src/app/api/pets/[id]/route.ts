import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { createClient } from '@supabase/supabase-js'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîß API Pet Detail: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', params.id)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîß API Pet Detail: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    if (authError || !user) {
      console.log('üîß API Pet Detail: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üîß API Pet Detail: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –ø–æ ID
    const { data: pets, error } = await supabase
      .from('pets')
      .select('*')
      .eq('id', params.id)
      .eq('user_id', user.id)

    if (error) {
      console.error('üîß API Pet Detail: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', error)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞' }, { status: 500 })
    }

    if (!pets || pets.length === 0) {
      console.log('üîß API Pet Detail: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({ error: '–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    const pet = pets[0]
    console.log('üîß API Pet Detail: –ü–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω:', pet.name)

    return NextResponse.json(pet)
  } catch (error) {
    console.error('üîß API Pet Detail: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîß API Pet Detail: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PUT –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', params.id)
    console.log('üîß API Pet Detail: URL –∑–∞–ø—Ä–æ—Å–∞:', request.url)
    console.log('üîß API Pet Detail: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', request.method)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîß API Pet Detail: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    if (authError || !user) {
      console.log('üîß API Pet Detail: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üîß API Pet Detail: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    const body = await request.json()
    console.log('üîß API Pet Detail: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', body)
    console.log('üîß API Pet Detail: photo_url –≤ body:', body.photo_url)
    console.log('üîß API Pet Detail: –¢–∏–ø photo_url:', typeof body.photo_url)

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∏—Ç–æ–º–µ—Ü
    const { data: existingPet, error: checkError } = await supabase
      .from('pets')
      .select('*')
      .eq('id', params.id)
      .eq('user_id', user.id)
      .single()

    if (checkError || !existingPet) {
      console.error('üîß API Pet Detail: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', checkError)
      return NextResponse.json({ error: '–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    console.log('üîß API Pet Detail: –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', existingPet.name)

    const updateData = {
      ...body,
      updated_at: new Date().toISOString()
    }
    
    console.log('üîß API Pet Detail: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ:', updateData)
    console.log('üîß API Pet Detail: photo_url –≤ updateData:', updateData.photo_url)
    
    // –°–æ–∑–¥–∞–µ–º admin –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
    const supabaseAdmin = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )
    
    console.log('üîß API Pet Detail: Admin –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ admin –∫–ª–∏–µ–Ω—Ç
    const { data: pets, error } = await supabaseAdmin
      .from('pets')
      .update(updateData)
      .eq('id', params.id)
      .eq('user_id', user.id)
      .select()

    if (error) {
      console.error('üîß API Pet Detail: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', error)
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞: ${error.message}` }, { status: 500 })
    }

    if (!pets || pets.length === 0) {
      console.error('üîß API Pet Detail: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω')
      return NextResponse.json({ error: '–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω' }, { status: 500 })
    }

    const pet = pets[0]
    console.log('üîß API Pet Detail: –ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', pet)

    return NextResponse.json(pet)
  } catch (error) {
    console.error('üîß API Pet Detail: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîß API Pet Detail: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DELETE –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', params.id)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîß API Pet Detail: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    if (authError || !user) {
      console.log('üîß API Pet Detail: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üîß API Pet Detail: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    // –£–¥–∞–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞
    const { error } = await supabase
      .from('pets')
      .delete()
      .eq('id', params.id)
      .eq('user_id', user.id)

    if (error) {
      console.error('üîß API Pet Detail: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', error)
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞: ${error.message}` }, { status: 500 })
    }

    console.log('üîß API Pet Detail: –ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω')

    return NextResponse.json({ success: true, message: '–ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω' })
  } catch (error) {
    console.error('üîß API Pet Detail: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
