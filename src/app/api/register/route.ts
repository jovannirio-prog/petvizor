import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üîê API Register: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
    console.log('üîê API Register: URL –∑–∞–ø—Ä–æ—Å–∞:', request.url)
    console.log('üîê API Register: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', request.method)
    
    const { email, password, full_name } = await request.json()
    console.log('üìß Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', email)

    if (!email || !password) {
      console.log('‚ùå API Register: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
      return NextResponse.json({ 
        success: false, 
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    console.log('üîß API Register: –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç')
    console.log('üîß API Register: SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL)
    console.log('üîß API Register: SUPABASE_ANON_KEY —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
    console.log('üîß API Register: SUPABASE_ANON_KEY –¥–ª–∏–Ω–∞:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.length || 0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
      console.error('‚ùå API Register: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase')
      return NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase',
        details: {
          hasUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
          hasKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
        }
      }, { status: 500 })
    }

    const supabase = createClient()

    console.log('üîë API Register: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: full_name || email.split('@')[0]
        }
      }
    })

    if (error) {
      console.error('‚ùå API Register: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      console.error('‚ùå API Register: –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.status)
      console.error('‚ùå API Register: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message)
      console.error('‚ùå API Register: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error)
      console.error('‚ùå API Register: –ò–º—è –æ—à–∏–±–∫–∏:', error.name)
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      let statusCode = 400
      
      if (error.message.includes('User already registered')) {
        errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
        statusCode = 409
      } else if (error.message.includes('Password should be at least')) {
        errorMessage = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
        statusCode = 400
      } else if (error.message.includes('Invalid email')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        statusCode = 400
      } else if (error.message.includes('fetch') || error.message.includes('fetch failed') || error.name === 'AuthRetryableFetchError') {
        errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase.'
        statusCode = 500
      } else if (error.message.includes('Database error saving new user')) {
        errorMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –∏ RLS –ø–æ–ª–∏—Ç–∏–∫–∏.'
        statusCode = 500
      }
      
      return NextResponse.json({ 
        success: false, 
        error: errorMessage,
        details: {
          originalError: error.message,
          status: error.status,
          name: error.name,
          fullError: error
        }
      }, { status: statusCode })
    }

    if (!data.user) {
      console.log('‚ùå API Register: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω')
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      }, { status: 400 })
    }

    console.log('‚úÖ API Register: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user.email)
    console.log('üîç API Register: data.session:', data.session)
    console.log('üîç API Register: access_token length:', data.session?.access_token?.length)
    console.log('üîç API Register: refresh_token length:', data.session?.refresh_token?.length)
    
    // –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
    console.log('‚úÖ API Register: –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º')
    
    return NextResponse.json({
      success: true,
      data: {
        user: data.user,
        session: data.session
      },
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    })

  } catch (error: any) {
    console.error('‚ùå API Register: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    console.error('‚ùå API Register: –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name)
    console.error('‚ùå API Register: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message)
    console.error('‚ùå API Register: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack)
    
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: {
        type: error.name,
        message: error.message
      }
    }, { status: 500 })
  }
}
