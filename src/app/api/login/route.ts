import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üîê API Login: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
    console.log('üîê API Login: URL –∑–∞–ø—Ä–æ—Å–∞:', request.url)
    console.log('üîê API Login: –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', request.method)
    console.log('üîê API Login: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', Object.fromEntries(request.headers.entries()))
    
    const { email, password } = await request.json()
    console.log('üìß Email:', email)

    if (!email || !password) {
      console.log('‚ùå API Login: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
      return NextResponse.json({ 
        success: false, 
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    console.log('üîß API Login: –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç')
    console.log('üîß API Login: SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL)
    console.log('üîß API Login: SUPABASE_ANON_KEY —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
    console.log('üîß API Login: SUPABASE_ANON_KEY –¥–ª–∏–Ω–∞:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.length || 0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
      console.error('‚ùå API Login: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase')
      return NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase',
        details: {
          hasUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
          hasKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
        }
      }, { status: 500 })
    }
    
    const supabase = createClient()

    console.log('üîë API Login: –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })

    if (error) {
      console.error('‚ùå API Login: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
      console.error('‚ùå API Login: –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.status)
      console.error('‚ùå API Login: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message)
      console.error('‚ùå API Login: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error)
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É'
      let statusCode = 401
      
      if (error.message.includes('Invalid login credentials')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      } else if (error.message.includes('Email not confirmed')) {
        errorMessage = 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
        statusCode = 403
      } else if (error.message.includes('Too many requests')) {
        errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        statusCode = 429
      } else if (error.message.includes('fetch')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
        statusCode = 500
      }
      
      return NextResponse.json({ 
        success: false, 
        error: errorMessage,
        details: {
          originalError: error.message,
          status: error.status,
          name: error.name
        }
      }, { status: statusCode })
    }

    if (!data.user) {
      console.log('‚ùå API Login: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 401 })
    }

    console.log('‚úÖ API Login: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user.email)
    console.log('üîç API Login: data.session:', data.session)
    console.log('üîç API Login: access_token length:', data.session?.access_token?.length)
    console.log('üîç API Login: refresh_token length:', data.session?.refresh_token?.length)
    
    return NextResponse.json({
      success: true,
      data: {
        user: data.user,
        session: data.session
      }
    })

  } catch (error: any) {
    console.error('‚ùå API Login: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    console.error('‚ùå API Login: –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name)
    console.error('‚ùå API Login: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message)
    console.error('‚ùå API Login: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack)
    
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: {
        type: error.name,
        message: error.message
      }
    }, { status: 500 })
  }
}
