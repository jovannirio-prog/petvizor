import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üîê API Login: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
    
    const { email, password } = await request.json()
    console.log('üìß Email:', email)

    if (!email || !password) {
      console.log('‚ùå API Login: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
      return NextResponse.json({ 
        success: false, 
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    console.log('üîß API Login: –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç')
    const supabase = createClient()

    console.log('üîë API Login: –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })

    if (error) {
      console.error('‚ùå API Login: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
      return NextResponse.json({ 
        success: false, 
        error: error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É' 
      }, { status: 401 })
    }

    if (!data.user) {
      console.log('‚ùå API Login: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 401 })
    }

    console.log('‚úÖ API Login: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user.email)
    console.log('üîç API Login: data.session:', data.session)
    console.log('üîç API Login: access_token length:', data.session?.access_token?.length)
    console.log('üîç API Login: refresh_token length:', data.session?.refresh_token?.length)
    return NextResponse.json({
      success: true,
      data: {
        user: data.user,
        session: data.session
      }
    })

  } catch (error) {
    console.error('üí• API Login: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 })
  }
}
