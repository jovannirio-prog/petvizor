import { NextRequest, NextResponse } from 'next/server'
import { sendEmailResend, createRegistrationNotificationEmail } from '@/lib/email-resend'

export async function POST(request: NextRequest) {
  try {
    console.log('üìß Test Email: –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
      console.error('‚ùå Test Email: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
      return NextResponse.json({ 
        success: false, 
        error: 'SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SMTP_USER –∏ SMTP_PASS.' 
      }, { status: 500 })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const testUserData = {
      email: 'test@example.com',
      full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      created_at: new Date().toISOString()
    }

    const notificationEmail = createRegistrationNotificationEmail(testUserData)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π email
    const emailResult = await sendEmailResend({
      to: 'ivan@leovet24.ru',
      subject: `[–¢–ï–°–¢] ${notificationEmail.subject}`,
      html: notificationEmail.html
    })

    if (emailResult.success) {
      console.log('‚úÖ Test Email: –¢–µ—Å—Ç–æ–≤—ã–π email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      return NextResponse.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        messageId: emailResult.messageId
      })
    } else {
      console.error('‚ùå Test Email: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email:', emailResult.error)
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email',
        details: emailResult.error,
        smtpConfig: {
          host: process.env.SMTP_HOST,
          port: process.env.SMTP_PORT,
          user: process.env.SMTP_USER ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          pass: process.env.SMTP_PASS ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          from: process.env.SMTP_FROM
        }
      }, { status: 500 })
    }

  } catch (error: any) {
    console.error('‚ùå Test Email: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({
    message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email',
    smtpConfigured: !!(process.env.SMTP_USER && process.env.SMTP_PASS),
    smtpHost: process.env.SMTP_HOST || 'smtp.gmail.com',
    smtpPort: process.env.SMTP_PORT || '587',
    smtpUser: process.env.SMTP_USER ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
    notificationEmail: process.env.NOTIFICATION_EMAIL || 'ivan@leovet24.ru'
  })
}
