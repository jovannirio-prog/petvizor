import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export async function GET(request: NextRequest) {
  try {
    console.log('üîß Test Storage: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    console.log('üîß Test Storage: Supabase URL:', supabaseUrl ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    console.log('üîß Test Storage: Service Role Key:', serviceRoleKey ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    
    if (!supabaseUrl || !serviceRoleKey) {
      return NextResponse.json({ 
        error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
        supabaseUrl: !!supabaseUrl,
        serviceRoleKey: !!serviceRoleKey
      }, { status: 500 })
    }

    // –°–æ–∑–¥–∞–µ–º admin –∫–ª–∏–µ–Ω—Ç
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket
    const { data: buckets, error: bucketError } = await supabaseAdmin.storage.listBuckets()
    
    if (bucketError) {
      console.error('üîß Test Storage: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets:', bucketError)
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è buckets: ${bucketError.message}` }, { status: 500 })
    }

    const petPhotosBucket = buckets.find(bucket => bucket.name === 'pet-photos')
    
    console.log('üîß Test Storage: –ù–∞–π–¥–µ–Ω bucket pet-photos:', !!petPhotosBucket)
    console.log('üîß Test Storage: –í—Å–µ buckets:', buckets.map(b => b.name))

    return NextResponse.json({ 
      success: true,
      supabaseUrl: !!supabaseUrl,
      serviceRoleKey: !!serviceRoleKey,
      petPhotosBucketExists: !!petPhotosBucket,
      allBuckets: buckets.map(b => b.name)
    })

  } catch (error) {
    console.error('üîß Test Storage: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
