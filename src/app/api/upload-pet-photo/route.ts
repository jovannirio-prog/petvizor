import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { generateFileName } from '@/lib/image-utils'
import { createClient } from '@supabase/supabase-js'

export async function POST(request: NextRequest) {
  try {
    console.log('üîß API Upload Pet Photo: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîß API Upload Pet Photo: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    if (authError || !user) {
      console.log('üîß API Upload Pet Photo: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üîß API Upload Pet Photo: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ FormData
    const formData = await request.formData()
    const file = formData.get('file') as File
    
    if (!file) {
      console.log('üîß API Upload Pet Photo: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 400 })
    }

    console.log('üîß API Upload Pet Photo: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', file.name, '—Ä–∞–∑–º–µ—Ä:', file.size)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (3MB)
    const maxSize = 3 * 1024 * 1024 // 3MB –≤ –±–∞–π—Ç–∞—Ö
    if (file.size > maxSize) {
      console.log('üîß API Upload Pet Photo: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size)
      return NextResponse.json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 3MB' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const validTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif']
    if (!validTypes.includes(file.type)) {
      console.log('üîß API Upload Pet Photo: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type)
      return NextResponse.json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞' }, { status: 400 })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = generateFileName(file.name, user.id)
    console.log('üîß API Upload Pet Photo: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', fileName)

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ ArrayBuffer
    const arrayBuffer = await file.arrayBuffer()
    const uint8Array = new Uint8Array(arrayBuffer)

    // –°–æ–∑–¥–∞–µ–º admin –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
    const supabaseAdmin = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )

    console.log('üîß API Upload Pet Photo: Admin –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω')

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage —á–µ—Ä–µ–∑ admin –∫–ª–∏–µ–Ω—Ç
    const { data, error } = await supabaseAdmin.storage
      .from('pet-photos')
      .upload(fileName, uint8Array, {
        contentType: file.type,
        cacheControl: '3600',
        upsert: true // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
      })

    if (error) {
      console.error('üîß API Upload Pet Photo: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', error)
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}` }, { status: 500 })
    }

    console.log('üîß API Upload Pet Photo: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:', data.path)

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabaseAdmin.storage
      .from('pet-photos')
      .getPublicUrl(data.path)

    const publicUrl = urlData.publicUrl
    console.log('üîß API Upload Pet Photo: –ü—É–±–ª–∏—á–Ω—ã–π URL:', publicUrl)

    return NextResponse.json({ 
      success: true,
      url: publicUrl,
      path: data.path
    })

  } catch (error) {
    console.error('üîß API Upload Pet Photo: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
