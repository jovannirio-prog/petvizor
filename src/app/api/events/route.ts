import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function GET(request: NextRequest) {
  try {
    console.log('üîß API Events: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞')
    
    const supabase = createClient()
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîß API Events: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    if (authError || !user) {
      console.log('üîß API Events: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üîß API Events: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(request.url)
    const petId = searchParams.get('pet_id')

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let query = supabase
      .from('events')
      .select(`
        *,
        pets (
          id,
          name,
          species,
          breed
        )
      `)
      .eq('user_id', user.id)
      .order('event_date', { ascending: true })

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω pet_id, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–∏—Ç–æ–º—Ü—É
    if (petId) {
      query = query.eq('pet_id', petId)
    }

    const { data: events, error } = await query

    if (error) {
      console.error('üîß API Events: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π' }, { status: 500 })
    }

    console.log('üîß API Events: –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:', events?.length || 0)

    return NextResponse.json(events || [])
  } catch (error) {
    console.error('üîß API Events: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîß API Events: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞')
    
    const supabase = createClient()
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîß API Events: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    if (authError || !user) {
      console.log('üîß API Events: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üîß API Events: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

    const body = await request.json()
    console.log('üîß API Events: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', body)
    
    const { 
      pet_id, 
      event_type, 
      event_name, 
      event_description, 
      event_date, 
      notification_days_before = 7,
      notification_active = true 
    } = body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!pet_id || !event_type || !event_name || !event_date) {
      console.log('üîß API Events: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return NextResponse.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const { data: pet, error: petError } = await supabase
      .from('pets')
      .select('id, name')
      .eq('id', pet_id)
      .eq('user_id', user.id)
      .single()

    if (petError || !pet) {
      console.log('üîß API Events: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
      return NextResponse.json({ error: '–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    console.log('üîß API Events: –ü–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω:', pet.name)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const { data: events, error } = await supabase
      .from('events')
      .insert([{
        pet_id,
        user_id: user.id,
        event_type,
        event_name,
        event_description,
        event_date,
        notification_days_before,
        notification_active
      }])
      .select(`
        *,
        pets (
          id,
          name,
          species,
          breed
        )
      `)

    if (error) {
      console.error('üîß API Events: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error)
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error.message}` }, { status: 500 })
    }

    if (!events || events.length === 0) {
      console.error('üîß API Events: –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ')
      return NextResponse.json({ error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ' }, { status: 500 })
    }

    const event = events[0]
    console.log('üîß API Events: –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', event)

    return NextResponse.json(event)
  } catch (error) {
    console.error('üîß API Events: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

