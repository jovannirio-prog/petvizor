import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üîß Test Register Simple: –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    const { email, password } = await request.json()
    
    if (!email || !password) {
      return NextResponse.json({
        success: false,
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 })
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient()
    
    console.log('üîß Test Register Simple: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    console.log('üîß Test Register Simple: Email:', email)
    
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: email.split('@')[0]
        }
      }
    })
    
    if (error) {
      console.error('‚ùå Test Register Simple: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      console.error('‚ùå Test Register Simple: –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.status)
      console.error('‚ùå Test Register Simple: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message)
      console.error('‚ùå Test Register Simple: –ò–º—è –æ—à–∏–±–∫–∏:', error.name)
      
      return NextResponse.json({
        success: false,
        error: error.message,
        details: {
          status: error.status,
          name: error.name,
          fullError: error
        }
      }, { status: 400 })
    }
    
    console.log('‚úÖ Test Register Simple: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
    console.log('‚úÖ Test Register Simple: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', data.user?.email)
    console.log('‚úÖ Test Register Simple: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', !!data.session)
    
    return NextResponse.json({
      success: true,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      data: {
        user: {
          id: data.user?.id,
          email: data.user?.email,
          email_confirmed_at: data.user?.email_confirmed_at
        },
        session: {
          access_token: data.session?.access_token ? '***HIDDEN***' : null,
          refresh_token: data.session?.refresh_token ? '***HIDDEN***' : null
        }
      }
    })
    
  } catch (error: any) {
    console.error('‚ùå Test Register Simple: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({
      success: false,
      error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
      details: error.message
    }, { status: 500 })
  }
}
