import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

    const supabase = createClient(supabaseUrl, serviceRoleKey)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('üîí API Admin User Update: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      console.log('üîí API Admin User Update: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    const { data: adminProfile, error: adminError } = await supabase
      .from('profiles')
      .select('role_id')
      .eq('id', user.id)
      .single()

    if (adminError || !adminProfile) {
      console.log('üîí API Admin User Update: –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({ error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    const { data: adminRole, error: roleError } = await supabase
      .from('user_roles')
      .select('name')
      .eq('id', adminProfile.role_id)
      .single()

    if (roleError || adminRole?.name !== 'admin') {
      console.log('üîí API Admin User Update: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const { role_id } = await request.json()

    if (!role_id) {
      console.log('üîí API Admin User Update: –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å')
      return NextResponse.json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å' }, { status: 400 })
    }

    console.log('üîç API Admin User Update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', params.id, '–Ω–∞ —Ä–æ–ª—å:', role_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: roleExists, error: roleCheckError } = await supabase
      .from('user_roles')
      .select('id')
      .eq('id', role_id)
      .single()

    if (roleCheckError || !roleExists) {
      console.log('üîí API Admin User Update: –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return NextResponse.json({ error: '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: updatedProfile, error: updateError } = await supabase
      .from('profiles')
      .update({ role_id })
      .eq('id', params.id)
      .select(`
        *,
        user_roles (
          id,
          name,
          display_name
        )
      `)
      .single()

    if (updateError) {
      console.error('‚ùå API Admin User Update: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏' }, { status: 500 })
    }

    console.log('‚úÖ API Admin User Update: –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedProfile)

    return NextResponse.json({ user: updatedProfile })
  } catch (error) {
    console.error('‚ùå API Admin User Update: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
