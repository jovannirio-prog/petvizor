import { NextResponse } from 'next/server'

// –≠—Ç–æ—Ç endpoint —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
export async function POST() {
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://zuuupcwjynjeqtjzdimt.supabase.co'
    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    if (!serviceRoleKey) {
      console.error('‚ùå Create Admin: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_SERVICE_ROLE_KEY')
      return NextResponse.json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_SERVICE_ROLE_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ .env.local: SUPABASE_SERVICE_ROLE_KEY=your_service_role_key',
        details: {
          supabaseUrl: supabaseUrl,
          serviceRoleKey: false
        }
      }, { status: 500 })
    }

    console.log('üîç Create Admin: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin')

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase Auth API
    const response = await fetch(`${supabaseUrl}/auth/v1/admin/users`, {
      method: 'POST',
      headers: {
        'apikey': serviceRoleKey,
        'Authorization': `Bearer ${serviceRoleKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'sa@petvizor.local',
        password: 'yyy789465',
        email_confirm: true,
        user_metadata: {
          full_name: 'System Administrator'
        }
      })
    })

    if (!response.ok) {
      const errorData = await response.json()
      console.error('‚ùå Create Admin: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', errorData)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 500 })
    }

    const userData = await response.json()
    console.log('‚úÖ Create Admin: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userData.user.id)

    // –¢–µ–ø–µ—Ä—å –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å admin
    const { createClient } = await import('@supabase/supabase-js')
    const supabase = createClient(supabaseUrl, serviceRoleKey)

    const { error: roleError } = await supabase
      .from('profiles')
      .update({ 
        role_id: (await supabase.from('user_roles').select('id').eq('name', 'admin').single()).data?.id,
        full_name: 'System Administrator'
      })
      .eq('id', userData.user.id)

    if (roleError) {
      console.error('‚ùå Create Admin: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏:', roleError)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏' }, { status: 500 })
    }

    console.log('‚úÖ Create Admin: –†–æ–ª—å admin –Ω–∞–∑–Ω–∞—á–µ–Ω–∞')

    return NextResponse.json({ 
      success: true, 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: userData.user.id,
        email: userData.user.email,
        role: 'admin'
      }
    })

  } catch (error) {
    console.error('‚ùå Create Admin: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
