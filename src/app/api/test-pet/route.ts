import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const supabaseUrl = 'https://zuuupcwjynjeqtjzdimt.supabase.co'
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp1dXVwY3dqeW5qZXF0anpkaW10Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUzMjk3NDcsImV4cCI6MjA3MDkwNTc0N30.fUKZnqs_xlsAUlle2UmAaalupJ0rMIyoKlIhNpdTFao'

    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞...')

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    const usersResponse = await fetch(`${supabaseUrl}/rest/v1/profiles?limit=1`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    })

    console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.status)
    const usersResult = await usersResponse.json()
    console.log('üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', usersResult)
    
    if (!usersResponse.ok || usersResult.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ')
      return NextResponse.json({ 
        error: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞'
      }, { status: 404 })
    }

    const userId = usersResult[0].id
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:', userId)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
    const testPetData = {
      user_id: userId,
      name: '–ë–∞—Ä—Å–∏–∫',
      breed: '–°–∏–∞–º—Å–∫–∞—è –∫–æ—à–∫–∞',
      age: 3, // –í–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
      weight: 4.5, // –í–µ—Å –≤ –∫–≥
      description: '–õ–∞—Å–∫–æ–≤—ã–π –∏ –∏–≥—Ä–∏–≤—ã–π –∫–æ—Ç. –õ—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º –∏ —Å–ø–∞—Ç—å –Ω–∞ —Å–æ–ª–Ω—ã—à–∫–µ.',
      image_url: null // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞ null)
    }

    console.log('üêæ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:', testPetData)

    const petResponse = await fetch(`${supabaseUrl}/rest/v1/pets`, {
      method: 'POST',
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testPetData)
    })

    console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', petResponse.status)

    if (petResponse.ok) {
      const petResult = await petResponse.json()
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', petResult[0])
      return NextResponse.json({ 
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        pet: petResult[0]
      })
    } else {
      const errorResult = await petResponse.json()
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞:', errorResult)
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞',
        details: errorResult
      }, { status: petResponse.status })
    }

  } catch (error: any) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:', error)
    return NextResponse.json({ 
      error: error.message,
      details: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞'
    }, { status: 500 })
  }
}
