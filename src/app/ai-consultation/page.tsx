'use client'

import { useState, useRef, useEffect } from 'react'
import { Send, Bot, User, PawPrint, Settings, MessageCircle, Clock, AlertCircle } from 'lucide-react'
import { useUser } from '@/hooks/useUser'
import { usePets } from '@/hooks/usePets'
import NavigationWrapper from '@/components/NavigationWrapper'

interface Message {
  id: string
  text: string
  isUser: boolean
  timestamp: string
  context?: any
  sources?: {
    count: number
    codes: string
  }
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø Pet –∏–∑ —Ö—É–∫–∞ usePets

export default function AIConsultationPage() {
  const { user, loading } = useUser()
  const { pets, loading: petsLoading } = usePets()
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedPet, setSelectedPet] = useState<any>(null)
  const [sessionId, setSessionId] = useState<string | null>(null)
  const [showPetSelector, setShowPetSelector] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤
  useEffect(() => {
    console.log('üîç AI Consultation: –ü–∏—Ç–æ–º—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', pets?.length || 0, pets)
    console.log('üîç AI Consultation: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤:', petsLoading)
  }, [pets, petsLoading])

  const handleAIResponse = (data: any) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º sessionId –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if (data.sessionId && !sessionId) {
      setSessionId(data.sessionId)
    }
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
    let responseText = data.response
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ OpenAI –º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å
    responseText = responseText.replace(/üìö\s*\*\*–ò—Å—Ç–æ—á–Ω–∏–∫.*?LeoVet.*?\*\*.*?(\n|$)/gi, '')
    responseText = responseText.replace(/–ù–∞–π–¥–µ–Ω–æ \d+ –∏—Å—Ç–æ—á–Ω–∏–∫.*?(\n|$)/gi, '')
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    let sources = undefined
    if (data.sources) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ sources –∏–∑ API
      const sourceLines = data.sources.split('\n').filter((line: string) => line.trim())
      sources = {
        count: sourceLines.length,
        codes: data.sources
      }
    } else if (data.context && data.context.relevantKnowledgeFound > 0) {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      sources = {
        count: data.context.relevantKnowledgeFound,
        codes: data.context.usedRecordCodes || '–ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      }
    }
    
    const aiMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: responseText,
      isUser: false,
      timestamp: data.timestamp || new Date().toISOString(),
      context: data.context,
      sources: sources
    }

    setMessages(prev => [...prev, aiMessage])
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date().toISOString()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      let accessToken = localStorage.getItem('supabase_access_token')
      const refreshToken = localStorage.getItem('supabase_refresh_token')
      
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      }
      
      if (accessToken) {
        headers['Authorization'] = `Bearer ${accessToken}`
      }
      
      if (refreshToken) {
        headers['x-refresh-token'] = refreshToken
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const conversationHistory = messages.map(msg => ({
        role: msg.isUser ? 'user' : 'assistant',
        content: msg.text
      }))

      const response = await fetch('/api/ai/consultation', {
        method: 'POST',
        headers,
        body: JSON.stringify({
          message: inputMessage,
          petInfo: selectedPet,
          sessionId: sessionId,
          conversationHistory: conversationHistory
        }),
      })

      if (response.status === 401) {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
        console.log('üîç AI Consultation: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å')
        const refreshResponse = await fetch('/api/user', {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'x-refresh-token': refreshToken || ''
          }
        })
        
        if (refreshResponse.ok) {
          const refreshData = await refreshResponse.json()
          if (refreshData.newTokens) {
            localStorage.setItem('supabase_access_token', refreshData.newTokens.access_token)
            if (refreshData.newTokens.refresh_token) {
              localStorage.setItem('supabase_refresh_token', refreshData.newTokens.refresh_token)
            }
            accessToken = refreshData.newTokens.access_token
            
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            headers['Authorization'] = `Bearer ${accessToken}`
            const retryResponse = await fetch('/api/ai/consultation', {
              method: 'POST',
              headers,
              body: JSON.stringify({
                message: inputMessage,
                petInfo: selectedPet,
                sessionId: sessionId,
                conversationHistory: conversationHistory
              }),
            })
            
            if (!retryResponse.ok) {
              const errorData = await retryResponse.json().catch(() => ({}))
              throw new Error(errorData.error || `HTTP ${retryResponse.status}: ${retryResponse.statusText}`)
            }
            
            const data = await retryResponse.json()
            handleAIResponse(data)
            return
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
      }

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      handleAIResponse(data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
      if (error instanceof Error && error.message.includes('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...',
          isUser: false,
          timestamp: new Date().toISOString()
        }
        setMessages(prev => [...prev, errorMessage])
        
        // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        setTimeout(() => {
          localStorage.removeItem('supabase_access_token')
          localStorage.removeItem('supabase_refresh_token')
          window.location.href = '/login'
        }, 2000)
        return
      }
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.`,
        isUser: false,
        timestamp: new Date().toISOString()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const startNewSession = () => {
    setMessages([])
    setSessionId(null)
  }

  const getRoleDisplayName = () => {
    if (!user?.role) return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    return user.role.display_name || user.role.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  }

  const getRoleDescription = () => {
    if (!user?.role) return '–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ!'
    
    const role = user.role.name
    switch (role) {
      case 'admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º'
      case 'clinic_admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏ - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'
      case 'clinic_vet':
        return '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
      case 'knowledge':
        return '–†–µ–¥–∞–∫—Ç–æ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π - —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
      case 'breeder':
        return '–ó–∞–≤–æ–¥—á–∏–∫ - —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ç–∏–∫–∏'
      case 'shelter':
        return '–ü—Ä–∏—é—Ç/–í–æ–ª–æ–Ω—Ç–µ—Ä - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å'
      case 'partner':
        return '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä - –±–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'
      default:
        return '–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ!'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <NavigationWrapper>
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</h1>
            <p className="text-gray-600 mb-6">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
            <div className="space-x-4">
              <a href="/login" className="inline-block bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors">
                –í–æ–π—Ç–∏
              </a>
              <a href="/register" className="inline-block bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors">
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
              </a>
            </div>
          </div>
        </div>
      </NavigationWrapper>
    )
  }

  return (
    <NavigationWrapper>
      <div className="flex flex-col h-screen">
        {/* Header - —Å–∏–Ω–∏–π –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
        <div className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-4 py-4 sm:py-6">
          <div className="max-w-6xl mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Bot className="h-6 w-6 sm:h-8 sm:w-8" />
                <div>
                  <h1 className="text-xl sm:text-2xl font-bold">–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</h1>
                  <p className="text-blue-100 text-sm sm:text-base">
                    –ü—Ä–∏–≤–µ—Ç, {user?.full_name || user?.email}! –Ø Petvizor AI - –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.
                  </p>
                  <p className="text-blue-100 text-xs sm:text-sm mt-1">
                    –†–æ–ª—å: {getRoleDisplayName()} ‚Ä¢ {getRoleDescription()}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* New Session Button - –ø–æ–¥ —à–∞–ø–∫–æ–π */}
        <div className="bg-white border-b px-4 py-2">
          <div className="max-w-6xl mx-auto">
            <button
              onClick={startNewSession}
              className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors text-sm"
            >
              –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            </button>
          </div>
        </div>

        {/* Pet Selector */}
        <div className="bg-gray-50 px-4 py-3 border-b">
          <div className="max-w-6xl mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2 sm:space-x-3">
                <PawPrint className="h-4 w-4 sm:h-5 sm:w-5 text-gray-600" />
                <span className="text-xs sm:text-sm font-medium text-gray-700">–ü–∏—Ç–æ–º–µ—Ü (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</span>
                {selectedPet ? (
                  <div className="flex items-center space-x-2">
                    <span className="text-xs sm:text-sm text-gray-900">
                      {selectedPet.name}
                      {selectedPet.breed && ` ‚Ä¢ ${selectedPet.breed}`}
                    </span>
                    <button
                      onClick={() => setShowPetSelector(!showPetSelector)}
                      className="text-blue-600 hover:text-blue-800 text-xs sm:text-sm"
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                ) : (
                  <button
                    onClick={() => setShowPetSelector(!showPetSelector)}
                    className="text-blue-600 hover:text-blue-800 text-xs sm:text-sm"
                  >
                    –í—ã–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </button>
                )}
              </div>
              {sessionId && (
                <div className="flex items-center space-x-1 text-xs text-gray-500">
                  <Clock className="h-3 w-3" />
                  <span className="hidden sm:inline">–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞</span>
                </div>
              )}
            </div>

            {/* Pet Selector Dropdown */}
            {showPetSelector && (
              <div className="mt-3 p-3 bg-white rounded-lg border shadow-sm">
                {petsLoading ? (
                  <div className="text-center py-2">
                    <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
                  </div>
                ) : pets && pets.length > 0 ? (
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {pets.map((pet) => (
                      <button
                        key={pet.id}
                        onClick={() => {
                          setSelectedPet(pet)
                          setShowPetSelector(false)
                        }}
                        className={`p-2 rounded-lg border text-left transition-colors ${
                          selectedPet?.id === pet.id
                            ? 'border-blue-500 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="font-medium text-sm">{pet.name}</div>
                        <div className="text-xs text-gray-600">
                          {pet.breed && `${pet.breed}`}
                        </div>
                      </button>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-2 text-gray-500">
                    <PawPrint className="h-8 w-8 mx-auto mb-2 text-gray-300" />
                    <p className="text-sm">–ù–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤</p>
                    <a href="/pet/new" className="text-blue-600 hover:text-blue-800 text-sm">
                      –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
                    </a>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Messages - –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-white">
          <div className="max-w-6xl mx-auto">
            {messages.length === 0 && (
              <div className="text-center text-gray-500 py-8">
                <Bot className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                <p className="mb-2 text-sm sm:text-base">–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä, –∑–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ</p>
                {selectedPet && (
                  <p className="text-xs sm:text-sm text-gray-400">
                    –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è: {selectedPet.name}
                  </p>
                )}
              </div>
            )}
            
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`flex items-start space-x-2 max-w-[85%] sm:max-w-xs lg:max-w-md ${
                    message.isUser ? 'flex-row-reverse space-x-reverse' : ''
                  }`}
                >
                  <div className={`flex-shrink-0 w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center ${
                    message.isUser 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-200 text-gray-600'
                  }`}>
                    {message.isUser ? <User className="h-3 w-3 sm:h-4 sm:w-4" /> : <Bot className="h-3 w-3 sm:h-4 sm:w-4" />}
                  </div>
                  <div
                    className={`px-3 py-2 sm:px-4 rounded-lg ${
                      message.isUser
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <p className="text-xs sm:text-sm whitespace-pre-wrap">{message.text}</p>
                    <div className={`text-xs mt-1 ${
                      message.isUser ? 'text-blue-100' : 'text-gray-500'
                    }`}>
                      {new Date(message.timestamp).toLocaleTimeString()}
                      {message.sources && !message.isUser && (
                        <div className="mt-2">
                          <div className="flex items-center mb-1">
                            <MessageCircle className="h-3 w-3 mr-1" />
                            <span>–ù–∞–π–¥–µ–Ω–æ {message.sources.count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π LeoVet:</span>
                          </div>
                          <div className="text-xs text-gray-400 whitespace-pre-line">
                            {message.sources.codes}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="flex items-start space-x-2">
                  <div className="flex-shrink-0 w-6 h-6 sm:w-8 sm:h-8 rounded-full bg-gray-200 text-gray-600 flex items-center justify-center">
                    <Bot className="h-3 w-3 sm:h-4 sm:w-4" />
                  </div>
                  <div className="px-3 py-2 sm:px-4 rounded-lg bg-gray-100">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Input - –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ */}
        <div className="border-t bg-white p-4">
          <div className="max-w-6xl mx-auto">
            <div className="flex flex-col space-y-3">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={selectedPet 
                  ? `–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ ${selectedPet.name}...`
                  : "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–∏—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö..."
                }
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                rows={1}
                disabled={isLoading}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="w-full bg-blue-500 text-white px-4 py-3 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center justify-center space-x-2"
              >
                <Send className="h-4 w-4" />
                <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
              </button>
            </div>
            
            {!selectedPet && pets && pets.length > 0 && (
              <div className="mt-2 flex items-center text-xs sm:text-sm text-blue-600">
                <AlertCircle className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              </div>
            )}
          </div>
        </div>
      </div>
    </NavigationWrapper>
  )
}


