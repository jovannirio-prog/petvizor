'use client'

import { useState, useEffect } from 'react'
import { Calendar, Plus, Clock, CheckCircle } from 'lucide-react'
import Link from 'next/link'

interface Event {
  id: string
  event_type: string
  event_name: string
  event_date: string
  event_status: boolean
  notification_active: boolean
}

interface PetEventsProps {
  petId: string
  petName: string
}

export default function PetEvents({ petId, petName }: PetEventsProps) {
  const [events, setEvents] = useState<Event[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')

  useEffect(() => {
    loadEvents()
  }, [petId])

  const loadEvents = async () => {
    try {
      setLoading(true)
      setError('')

      const token = localStorage.getItem('supabase_access_token')
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      const response = await fetch(`/api/events?pet_id=${petId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        const activeEvents = data
          .filter((event: Event) => !event.event_status)
          .sort((a: Event, b: Event) => new Date(a.event_date).getTime() - new Date(b.event_date).getTime())
          .slice(0, 3) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è
        setEvents(activeEvents)
      } else {
        const errorData = await response.json()
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ${errorData.error}`)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error)
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏')
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU')
  }

  const getDaysUntilEvent = (dateString: string) => {
    const eventDate = new Date(dateString)
    const today = new Date()
    const diffTime = eventDate.getTime() - today.getTime()
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    
    if (diffDays < 0) return '–ü—Ä–æ—à–ª–æ'
    if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è'
    if (diffDays === 1) return '–ó–∞–≤—Ç—Ä–∞'
    if (diffDays < 7) return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω—è`
    return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω–µ–π`
  }

  const getEventTypeIcon = (eventType: string) => {
    switch (eventType) {
      case '–≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è':
        return 'üíâ'
      case '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':
        return 'üéÇ'
      case '–≤–∏–∑–∏—Ç –∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—É':
        return 'üè•'
      case '—Å—Ç—Ä–∏–∂–∫–∞':
        return '‚úÇÔ∏è'
      case '–∫—É–ø–∞–Ω–∏–µ':
        return 'üõÅ'
      default:
        return 'üìÖ'
    }
  }

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-bold text-gray-900 mb-4">–°–æ–±—ã—Ç–∏—è</h2>
        <div className="flex items-center justify-center py-8">
          <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mr-3"></div>
          <span className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-gray-900">–°–æ–±—ã—Ç–∏—è</h2>
        <Link
          href={`/pet/${petId}/events`}
          className="flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium"
        >
          <Plus className="w-4 h-4 mr-1" />
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏
        </Link>
      </div>

      {error ? (
        <div className="text-red-600 text-sm mb-4">{error}</div>
      ) : events.length === 0 ? (
        <div className="text-center py-8">
          <Calendar className="w-12 h-12 text-gray-300 mx-auto mb-3" />
          <p className="text-gray-500 mb-4">–£ {petName} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p>
          <Link
            href={`/pet/${petId}/events`}
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            <Plus className="w-4 h-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
          </Link>
        </div>
      ) : (
        <div className="space-y-3">
          {events.map((event) => (
            <div key={event.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div className="flex items-center">
                <span className="text-2xl mr-3">{getEventTypeIcon(event.event_type)}</span>
                <div>
                  <p className="font-medium text-gray-900">{event.event_name}</p>
                  <p className="text-sm text-gray-600">{formatDate(event.event_date)}</p>
                </div>
              </div>
              <div className="flex items-center text-sm text-gray-500">
                <Clock className="w-4 h-4 mr-1" />
                {getDaysUntilEvent(event.event_date)}
              </div>
            </div>
          ))}
          
          <div className="text-center pt-2">
            <Link
              href={`/pet/${petId}/events`}
              className="text-blue-600 hover:text-blue-800 text-sm font-medium"
            >
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è ‚Üí
            </Link>
          </div>
        </div>
      )}
    </div>
  )
}
