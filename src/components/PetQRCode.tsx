'use client'

import { useState, useEffect } from 'react'
import { Download, QrCode, Loader2, RefreshCw } from 'lucide-react'

interface PetQRCodeProps {
  petId: string
  petName: string
  size?: number
}

interface QRCodeData {
  qr_code_url: string
  qr_code_image: string
  public_url: string
  qr_code_updated_at: string
  has_qr_code: boolean
}

export default function PetQRCode({ petId, petName, size = 120 }: PetQRCodeProps) {
  const [qrCodeData, setQrCodeData] = useState<QRCodeData | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadQRCodeData()
  }, [petId])

  const loadQRCodeData = async () => {
    try {
      console.log('üîß PetQRCode: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', petId)
      setLoading(true)
      setError('')

      const response = await fetch(`/api/pets/${petId}/qr-code`)
      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const updatedData = {
        ...data,
        has_qr_code: !!data.qr_code_image // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      }
      
      setQrCodeData(updatedData)
      console.log('üîß PetQRCode: –î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', updatedData)
    } catch (err: any) {
      console.error('üîß PetQRCode: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  const generateQRCode = async () => {
    try {
      console.log('üîß PetQRCode: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:', petId)
      setLoading(true)
      setError('')

      const response = await fetch(`/api/pets/${petId}/qr-code`, {
        method: 'POST'
      })
      const data = await response.json()

      console.log('üîß PetQRCode: –û—Ç–≤–µ—Ç –æ—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', data)

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const updatedData = {
        ...data,
        has_qr_code: !!data.qr_code_image // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      }
      
      console.log('üîß PetQRCode: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', updatedData)
      setQrCodeData(updatedData)
      console.log('üîß PetQRCode: QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', updatedData)
    } catch (err: any) {
      console.error('üîß PetQRCode: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  const downloadQRCode = () => {
    if (!qrCodeData?.qr_code_image) {
      console.error('QR-–∫–æ–¥ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
      return
    }

    try {
      const link = document.createElement('a')
      link.download = `qr-${petName.toLowerCase().replace(/\s+/g, '-')}.png`
      link.href = qrCodeData.qr_code_image
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      console.log('üîß PetQRCode: QR-–∫–æ–¥ —Å–∫–∞—á–∞–Ω')
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', err)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞')
    }
  }

  const copyPublicUrl = async () => {
    if (!qrCodeData?.public_url) return

    try {
      await navigator.clipboard.writeText(qrCodeData.public_url)
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!')
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏')
    }
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-4">
      <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
        <QrCode className="h-5 w-5 mr-2 text-blue-600" />
        QR-–∫–æ–¥ –ø–∏—Ç–æ–º—Ü–∞
      </h3>
      
      {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="text-xs text-gray-500 mb-2">
        Debug: loading={loading.toString()}, qrCodeImage={qrCodeData?.qr_code_image ? 'exists' : 'null'}, error={error || 'none'}
      </div>
      
      <div className="text-center">
        {loading ? (
          <div className="space-y-4">
            <div className="w-24 h-24 bg-gray-100 rounded-lg mx-auto flex items-center justify-center">
              <Loader2 className="h-8 w-8 text-gray-400 animate-spin" />
            </div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        ) : !qrCodeData?.qr_code_image ? (
          <div className="space-y-4">
            <div className="w-24 h-24 bg-gray-100 rounded-lg mx-auto flex items-center justify-center">
              <QrCode className="h-8 w-8 text-gray-400" />
            </div>
            <button
              onClick={generateQRCode}
              disabled={loading}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed mx-auto"
            >
              <QrCode className="h-4 w-4" />
              <span>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥</span>
            </button>
            {error && (
              <p className="text-red-600 text-sm">{error}</p>
            )}
          </div>
        ) : (
          <div className="space-y-4">
            {/* QR-–∫–æ–¥ */}
            <div className="bg-white border-2 border-gray-200 rounded-lg p-3">
              <img
                src={qrCodeData.qr_code_image}
                alt={`QR-–∫–æ–¥ –¥–ª—è ${petName}`}
                className="mx-auto block"
                style={{ maxWidth: '100%', height: 'auto' }}
              />
            </div>

            {/* –ü—É–±–ª–∏—á–Ω—ã–π URL */}
            <div className="bg-gray-50 rounded-lg p-3">
              <p className="text-xs text-gray-600 mb-2">–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</p>
              <div className="flex items-center justify-between bg-white rounded border p-2">
                <code className="text-xs text-blue-600 truncate flex-1">
                  {qrCodeData.public_url}
                </code>
                <button
                  onClick={copyPublicUrl}
                  className="ml-2 text-blue-600 hover:text-blue-800 text-xs"
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
                >
                  üìã
                </button>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="space-y-2">
              <button
                onClick={downloadQRCode}
                className="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2"
              >
                <Download className="h-4 w-4" />
                <span>–°–∫–∞—á–∞—Ç—å QR-–∫–æ–¥</span>
              </button>
              <button
                onClick={generateQRCode}
                disabled={loading}
                className="w-full bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
              >
                <RefreshCw className="h-4 w-4" />
                <span>–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å</span>
              </button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="text-xs text-gray-500 space-y-1">
              <p>QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∏—Ç–æ–º—Ü–∞</p>
              {qrCodeData.qr_code_updated_at && (
                <p>–û–±–Ω–æ–≤–ª–µ–Ω: {new Date(qrCodeData.qr_code_updated_at).toLocaleString()}</p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

