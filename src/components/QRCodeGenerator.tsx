'use client'

import { useState, useEffect } from 'react'
import { Download, Copy, Check } from 'lucide-react'

interface QRCodeGeneratorProps {
  data: string
  petName: string
  size?: number
}

export default function QRCodeGenerator({ data, petName, size = 200 }: QRCodeGeneratorProps) {
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('')
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [copied, setCopied] = useState(false)

  useEffect(() => {
    console.log('üîç QRCodeGenerator: data =', data)
    console.log('üîç QRCodeGenerator: petName =', petName)
    console.log('üîç QRCodeGenerator: size =', size)
    
    if (data) {
      generateQRCode()
    } else {
      console.log('‚ùå QRCodeGenerator: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞')
      setError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞')
      setLoading(false)
    }
  }, [data, size])

  const generateQRCode = async () => {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞...')
      setLoading(true)
      setError('')

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º QRCode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å SSR
      const QRCode = (await import('qrcode')).default
      console.log('‚úÖ QRCode –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas
      const canvas = document.createElement('canvas')
      canvas.width = size
      canvas.height = size
      console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π canvas —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä—ã:', canvas.width, 'x', canvas.height)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
      console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏:', data)
      await QRCode.toCanvas(canvas, data, {
        width: size,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        },
        errorCorrectionLevel: 'M'
      })

      console.log('‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')

      // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const url = canvas.toDataURL('image/png')
      setQrCodeUrl(url)
      console.log('‚úÖ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω:', url.substring(0, 50) + '...')
    } catch (err: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', err)
      setError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: ${err.message}`)
    } finally {
      setLoading(false)
    }
  }

  const downloadQRCode = () => {
    if (!qrCodeUrl) {
      console.error('QR-–∫–æ–¥ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
      return
    }

    try {
      const link = document.createElement('a')
      link.download = `qr-${petName.toLowerCase().replace(/\s+/g, '-')}.png`
      link.href = qrCodeUrl
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      console.log('‚úÖ QR-–∫–æ–¥ —Å–∫–∞—á–∞–Ω')
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', err)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞')
    }
  }

  const copyQRCodeData = async () => {
    try {
      await navigator.clipboard.writeText(data)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
    }
  }

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center p-8 space-y-4">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <p className="text-sm text-gray-600">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...</p>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center text-red-600 p-4">
        <p className="mb-2">{error}</p>
        <div className="text-xs text-gray-500 mb-4">
          <p>–î–∞–Ω–Ω—ã–µ: {data || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
          <p>–ü–∏—Ç–æ–º–µ—Ü: {petName}</p>
        </div>
        <button 
          onClick={generateQRCode}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <div className="bg-white border-2 border-gray-200 rounded-lg p-4">
        {qrCodeUrl ? (
          <img
            src={qrCodeUrl}
            alt={`QR-–∫–æ–¥ –¥–ª—è ${petName}`}
            className="mx-auto block"
            style={{ maxWidth: '100%', height: 'auto' }}
          />
        ) : (
          <div className="w-full h-48 bg-gray-100 rounded flex items-center justify-center">
            <p className="text-gray-500">QR-–∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</p>
          </div>
        )}
      </div>

      <div className="flex flex-col sm:flex-row gap-3 justify-center">
        <button
          onClick={downloadQRCode}
          disabled={!qrCodeUrl}
          className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <Download className="w-4 h-4" />
          <span>–°–∫–∞—á–∞—Ç—å PNG</span>
        </button>

        <button
          onClick={copyQRCodeData}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2"
        >
          {copied ? (
            <>
              <Check className="w-4 h-4" />
              <span>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</span>
            </>
          ) : (
            <>
              <Copy className="w-4 h-4" />
              <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</span>
            </>
          )}
        </button>
      </div>

      <div className="text-xs text-gray-500 text-center">
        <p>QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∏—Ç–æ–º—Ü–∞</p>
        <p className="mt-1 break-all">{data}</p>
      </div>
    </div>
  )
}
