'use client'

import { useState, useEffect } from 'react'

interface UserRole {
  id: number
  name: string
  display_name: string
  description?: string
}

interface User {
  id: string
  email: string
  full_name?: string | null
  phone?: string | null
  role?: UserRole | null
}

export function useUser() {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    console.log('üîç useUser: –•—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    checkUser()
  }, [])

  const checkUser = async () => {
    try {
      console.log('üîç useUser: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      const accessToken = localStorage.getItem('supabase_access_token')
      const refreshToken = localStorage.getItem('supabase_refresh_token')
      console.log('üîç useUser: Access token –Ω–∞–π–¥–µ–Ω:', !!accessToken)
      console.log('üîç useUser: Refresh token –Ω–∞–π–¥–µ–Ω:', !!refreshToken)
      
      if (!accessToken) {
        console.log('üîç useUser: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user = null')
        setUser(null)
        setLoading(false)
        return
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 100))

      console.log('üîç useUser: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/user')
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const headers: Record<string, string> = {
        'Authorization': `Bearer ${accessToken}`
      }
      
      if (refreshToken) {
        headers['x-refresh-token'] = refreshToken
      }
      
      const response = await fetch('/api/user', { headers })

      console.log('üîç useUser: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å:', response.status)
      if (response.ok) {
        const result = await response.json()
        console.log('üîç useUser: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.user)
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
        if (result.newTokens) {
          console.log('üîç useUser: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã')
          if (result.newTokens.access_token) {
            localStorage.setItem('supabase_access_token', result.newTokens.access_token)
          }
          if (result.newTokens.refresh_token) {
            localStorage.setItem('supabase_refresh_token', result.newTokens.refresh_token)
          }
        }
        
        setUser(result.user)
      } else {
        console.log('üîç useUser: –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º')
        // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º
        localStorage.removeItem('supabase_access_token')
        localStorage.removeItem('supabase_refresh_token')
        setUser(null)
      }
    } catch (error) {
      console.error('‚ùå useUser: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      setUser(null)
    } finally {
      console.log('üîç useUser: –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, loading = false')
      setLoading(false)
    }
  }

  const logout = () => {
    console.log('üîç useUser: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    localStorage.removeItem('supabase_access_token')
    localStorage.removeItem('supabase_refresh_token')
    setUser(null)
    window.location.href = '/'
  }

  return {
    user,
    loading,
    logout,
    checkUser
  }
}
