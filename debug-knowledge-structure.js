// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
async function debugKnowledgeStructure() {
  try {
    console.log('üîç Debug: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...')
    
    const response = await fetch('/api/ai/knowledge')
    const data = await response.json()
    
    if (data.success && data.knowledge) {
      console.log('üìä Debug: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
        totalRecords: data.knowledge.length,
        tableStats: data.table_stats,
        tablesConfig: data.tables_config
      })
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
      const tableGroups = {}
      data.knowledge.forEach(record => {
        const table = record.table
        if (!tableGroups[table]) {
          tableGroups[table] = []
        }
        tableGroups[table].push(record)
      })
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
      Object.keys(tableGroups).forEach(tableName => {
        const records = tableGroups[tableName]
        console.log(`\nüìã Debug: –¢–∞–±–ª–∏—Ü–∞ "${tableName}" (${records.length} –∑–∞–ø–∏—Å–µ–π):`)
        
        if (records.length > 0) {
          const firstRecord = records[0]
          console.log('üîç Debug: –ü–æ–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:', Object.keys(firstRecord))
          console.log('üîç Debug: –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:', firstRecord)
          
          // –ò—â–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
          const possibleTitleFields = Object.keys(firstRecord).filter(field => 
            field.toLowerCase().includes('name') || 
            field.toLowerCase().includes('title') || 
            field.toLowerCase().includes('–∑–∞–≥–æ–ª–æ–≤–æ–∫') || 
            field.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') ||
            field.toLowerCase().includes('–≤–æ–ø—Ä–æ—Å') ||
            field.toLowerCase().includes('—Å–∏–º–ø—Ç–æ–º') ||
            field.toLowerCase().includes('—É—Å–ª—É–≥–∞') ||
            field.toLowerCase().includes('–ø—Ä–æ—Ü–µ–¥—É—Ä–∞')
          )
          
          console.log('üéØ Debug: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', possibleTitleFields)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
          const filledFields = Object.keys(firstRecord).filter(field => 
            firstRecord[field] && firstRecord[field].toString().trim() !== ''
          )
          console.log('‚úÖ Debug: –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', filledFields)
        }
      })
      
      return data
    } else {
      console.error('‚ùå Debug: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:', data.error)
    }
  } catch (error) {
    console.error('‚ùå Debug: –û—à–∏–±–∫–∞:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
async function testSearch(query) {
  try {
    console.log(`üîç Debug: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`)
    
    const response = await fetch('/api/ai/consultation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('supabase_access_token')}`
      },
      body: JSON.stringify({
        message: query,
        sessionId: 'debug-session'
      })
    })
    
    const data = await response.json()
    
    if (data.sources) {
      console.log('üìã Debug: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:', data.sources)
    }
    
    if (data.context) {
      console.log('üîç Debug: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', data.context)
    }
    
    return data
  } catch (error) {
    console.error('‚ùå Debug: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
console.log('üöÄ Debug: –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...')
debugKnowledgeStructure().then(() => {
  console.log('‚úÖ Debug: –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å testSearch("–≤–∞—à –∑–∞–ø—Ä–æ—Å") –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞.')
})
